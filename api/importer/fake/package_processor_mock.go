// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"io"
	"sync"
)

// ImportPackageMock is a mock implementation of importer.ImportPackage.
//
// 	func TestSomethingThatUsesImportPackage(t *testing.T) {
//
// 		// make and configure a mocked importer.ImportPackage
// 		mockedImportPackage := &ImportPackageMock{
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			GetResourceFunc: func(resourceName string) (io.ReadCloser, error) {
// 				panic("mock out the GetResource method")
// 			},
// 		}
//
// 		// use mockedImportPackage in code that requires importer.ImportPackage
// 		// and then make assertions.
//
// 	}
type ImportPackageMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetResourceFunc mocks the GetResource method.
	GetResourceFunc func(resourceName string) (io.ReadCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetResource holds details about calls to the GetResource method.
		GetResource []struct {
			// ResourceName is the resourceName argument value.
			ResourceName string
		}
	}
	lockClose       sync.RWMutex
	lockGetResource sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ImportPackageMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ImportPackageMock.CloseFunc: method is nil but ImportPackage.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedImportPackage.CloseCalls())
func (mock *ImportPackageMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetResource calls GetResourceFunc.
func (mock *ImportPackageMock) GetResource(resourceName string) (io.ReadCloser, error) {
	if mock.GetResourceFunc == nil {
		panic("ImportPackageMock.GetResourceFunc: method is nil but ImportPackage.GetResource was just called")
	}
	callInfo := struct {
		ResourceName string
	}{
		ResourceName: resourceName,
	}
	mock.lockGetResource.Lock()
	mock.calls.GetResource = append(mock.calls.GetResource, callInfo)
	mock.lockGetResource.Unlock()
	return mock.GetResourceFunc(resourceName)
}

// GetResourceCalls gets all the calls that were made to GetResource.
// Check the length with:
//     len(mockedImportPackage.GetResourceCalls())
func (mock *ImportPackageMock) GetResourceCalls() []struct {
	ResourceName string
} {
	var calls []struct {
		ResourceName string
	}
	mock.lockGetResource.RLock()
	calls = mock.calls.GetResource
	mock.lockGetResource.RUnlock()
	return calls
}
